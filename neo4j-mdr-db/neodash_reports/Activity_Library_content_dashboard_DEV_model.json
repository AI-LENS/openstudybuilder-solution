{
  "title": "OpenStudyBuilder Activity Library Dashboard",
  "version": "2.2",
  "settings": {
    "pagenumber": 2,
    "editable": true,
    "fullscreenEnabled": false,
    "parameters": {
      "undefined": "",
      "neodash_has_name": "",
      "neodash_$neodash_activitygroupvalue_name_": "",
      "neodash_activitygroupvalue_name": "",
      "neodash_ctcodelist_name": "",
      "neodash_activityinstanceclassvalue_name": "Finding",
      "neodash_activity_name": "Diastolic Blood Pressure",
      "neodash_activity_name_display": "Diastolic Blood Pressure",
      "neodash_activityinstance_name": "BMI",
      "neodash_activityinstance_name_display": "BMI",
      "neodash_activitygroup_name_display": "",
      "neodash_activitysubgroup_name_display": "Body Measurements",
      "neodash_activityinstance_adam_param_code": "",
      "neodash_activityinstance_adam_param_code_display": "",
      "neodash_activityinstanceclass_name_display": "Finding",
      "neodash_activityinstanceclass_name_subtype": "NumericFinding",
      "neodash_activityinstanceclass_name_subtype_display": "NumericFinding",
      "neodash_ctcodelist_submission_value": "NY",
      "neodash_ctcodelist_submission_value_display": "NY",
      "neodash_ctterm_nci_preferred_name": "",
      "neodash_ctterm_nci_preferred_name_display": "",
      "neodash_activityinstance_nci_preferred_name": "",
      "neodash_activityinstance_nci_preferred_name_display": "",
      "neodash_activityinstance_name_submission_value": "",
      "neodash_activityinstance_name_submission_value_display": "",
      "neodash_activity": "",
      "neodash_activity_instance": "TRIGP",
      "undefined_display": "",
      "neodash_activityinstanceclassvalue_name_display": "Finding",
      "neodash_activityinstanceclassvalue_name_subtype": "",
      "neodash_activityinstanceclassvalue_name_subtype_display": "",
      "neodash_activitygroupvalue_name_display": "",
      "neodash_activitysubgroupvalue_adam_param_code": "",
      "neodash_activitysubgroupvalue_adam_param_code_display": "",
      "neodash_$neodash_activity_instance": "''",
      "neodash_neodash_activity_instance": "",
      "neodash_cosmot_activity_instance": "DUNXID",
      "neodash_cosmos_activity_instance": "TRIGS",
      "neodash_activityvalue_name": "Systolic Blood Pressure",
      "neodash_activityvalue_name_display": "Systolic Blood Pressure",
      "neodash_activity_intance": "EGINTP",
      "neodash_activitysubgroupvalue_name": "Lipids",
      "neodash_activitysubgroupvalue_name_display": "Lipids"
    }
  },
  "pages": [
    {
      "title": "ReadMe",
      "reports": [
        {
          "title": "Hi there ðŸ‘‹",
          "query": "**This report is for browsing Activity Concepts**\n\nIt displays the Activity Concepts available in the OpenStudyBuilder Library.\n\nFollow the tabs to see different views of the concepts.\n\nFor more information on activity concepts you can read the OpenStudyBuilder \n[article on Biomedical Concepts/Activity Concepts](https://novo-nordisk.gitlab.io/nn-public/openstudybuilder/project-description/guide_activity_concept/).\n\n# NOTE: \nYou must run the query in the card to the right (Click the small arrow in the right side of the panel). This will load a procedure that can display the Activities in a more logical view (simple view) as well as a set of utility procedures being used for the COSMOS view.\nTo see the list of procedures refesh the table panel below.",
          "width": 5,
          "height": 2,
          "x": 0,
          "y": 0,
          "type": "text",
          "selection": {},
          "settings": {
            "downloadImageEnabled": false,
            "replaceGlobalParameters": true
          }
        },
        {
          "title": "Load custom procedures",
          "query": "CALL apoc.custom.declareProcedure(\n  'activityAsLogical(name::STRING) :: (row::MAP)','MATCH (p_agrp:ActivityGroupValue)<-[R1:IN_GROUP]-(p_asgrp:ActivitySubGroupValue)<-[R2:IN_SUB_GROUP]-(p_act:ActivityValue) where p_act.name=$name\nWITH p_agrp, p_asgrp,p_act,\napoc.create.vNode([\"ActivityGroup\"], properties(p_agrp)) as agrp,\napoc.create.vNode([\"ActivitySubGroup\"],properties(p_asgrp)) as asgrp,\napoc.create.vNode([\"Activity\"],properties(p_act)) as act\nWITH p_act,agrp,asgrp,act,\napoc.create.vRelationship(agrp,\"HAS\",{type:\"logical\"},asgrp) as r1,\napoc.create.vRelationship(asgrp,\"HAS\",{type:\"logical\"},act) as r2\nwith p_act,agrp,asgrp,act,r1,r2\nMATCH(p_act)<-[R3:IN_HIERARCHY]-(p_ai:ActivityInstanceValue)<-[R42:LATEST]-(p_ai_r:ActivityInstanceRoot),(p_ai)-[R4:ACTIVITY_INSTANCE_CLASS]->(p_aicr:ActivityInstanceClassRoot)-[R5:LATEST]->(p_aic:ActivityInstanceClassValue) \nWITH p_act,p_ai,p_aicr,p_aic,agrp,asgrp,act,r1,r2,\napoc.create.vNode([\"ActivityInstance\"],properties(p_ai)) as ai,\napoc.create.vNode([\"ActivityInstanceClass\"],properties(p_aic)) as aic\nWITH p_act,p_ai,p_aicr,p_aic,agrp,asgrp,act,ai,aic,r1,r2,\napoc.create.vRelationship(act,\"HAS\",{type:\"logical\"},ai) as r3,\napoc.create.vRelationship(ai,\"OF_CLASS\",{type:\"logical\"},aic) as r6\nWITH p_act,p_ai,p_aicr,p_aic,agrp,asgrp,act,ai,aic,r1,r2,r3,r6\nMATCH (p_ai:ActivityInstanceValue)-[R4:CONTAINS_ACTIVITY_ITEM]->(p_aitm1:ActivityItemValue)\nOPTIONAL MATCH(p_aitm1)<-[R5:LATEST]-(p_aitm1r:ActivityItemRoot)<-[R6:HAS_ACTIVITY_ITEM]-(p_aitmc1r:ActivityItemClassRoot)-[R7:LATEST]->(p_aitmc1:ActivityItemClassValue)\nOPTIONAL MATCH (p_aicr)-[R10:PARENT_CLASS]->(p_aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(p_aicp:ActivityInstanceClassValue)\nOPTIONAL MATCH (p_aicrp)-[R12:PARENT_CLASS]->(p_aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(p_aicpp:ActivityInstanceClassValue)\nOPTIONAL MATCH(p_aitmc1r)<-[R14:HAS_ITEM_CLASS]-(p_aicr)\nOPTIONAL MATCH(p_aitmc1r)<-[R15:HAS_ITEM_CLASS]-(p_aicrp)\nOPTIONAL MATCH(p_aitmc1r)<-[R16:HAS_ITEM_CLASS]-(p_aicrpp) \nWITH p_act,p_ai,p_aicr,p_aic,p_aitm1,p_aitm1r,p_aitmc1r,p_aitmc1,p_aicp,p_aicpp,R14,R15,R16,agrp,asgrp,act,ai,aic,r1,r2,r3,r6,\napoc.create.vNode([\"ActivityItem\"],properties(p_aitm1)) as aitm1,\napoc.create.vNode([\"ActivityItemClass\"],properties(p_aitmc1)) as aitmc1,\nCASE WHEN R15 is not null THEN apoc.create.vNode([\"ActivityInstanceClass\"],properties(p_aicp)) END as aicp,\nCASE WHEN R16 is not null THEN apoc.create.vNode([\"ActivityInstanceClass\"],properties(p_aicpp)) END as aicpp\nWITH p_act,p_ai,p_aicr,p_aic,p_aitm1,p_aitm1r,p_aitmc1r,p_aitmc1,R14,R15,R16,agrp,asgrp,act,ai,aic,aicp,aicpp,aitm1,aitmc1,r1,r2,r3,r6,\napoc.create.vRelationship(ai,\"HAS\",{type:\"logical\"},aitm1) as r4,\napoc.create.vRelationship(aitm1,\"OF_CLASS\",{type:\"logical\"},aitmc1) as r5,\nCASE WHEN (R14 is not null) THEN \napoc.create.vRelationship(aitmc1,\"OF_CLASS\",{type:\"logical\"},aic) END as r7,\nCASE WHEN (R15 is not null) \nTHEN apoc.create.vRelationship(aitmc1,\"OF_CLASS\",{type:\"logical\"},aicp) END as r8,\nCASE WHEN (R16 is not null) \nTHEN apoc.create.vRelationship(aitmc1,\"OF_CLASS\",{type:\"logical\"},aicpp) END as r9\nwith p_act,p_ai,p_aicr,p_aic,p_aitm1,p_aitm1r,p_aitmc1r,p_aitmc1,agrp,asgrp,act,ai,aic,aitm1,aitmc1,aicp,aicpp,r1,r2,r3,r4,r5,r6,r7,r8,r9\nOPTIONAL MATCH (p_aitm1)-[R17]->(p_ct2cd:CTTermRoot)-[R18:HAS_NAME_ROOT]->(ct2cdr:CTTermNameRoot)-[R19:LATEST]->(p_ct2_sponsor), (p_ct2cd)-[R20:HAS_ATTRIBUTES_ROOT]->(ct2att:CTTermAttributesRoot)-[R21:LATEST]->(p_ct2_cdisc)\nOPTIONAL MATCH (p_aitm1)-[:HAS_UNIT_DEFINITION]->(p_unitdefr:UnitDefinitionRoot)-[:LATEST]->(p_unitdef:UnitDefinitionValue)\nOPTIONAL MATCH(p_aitmc1)-[:HAS_ROLE]->(p_role_r:CTTermRoot)-[:HAS_NAME_ROOT]->(ctnr_role)-[:LATEST]->(p_role_val), (p_role_r)-[:HAS_ATTRIBUTES_ROOT]->(ctattr)-[:LATEST]->(p_role_attr_val)\nOPTIONAL MATCH(p_aitmc1)-[:HAS_DATA_TYPE]->(p_dtype_r)-[:HAS_NAME_ROOT]->(ctnr_dtype)-[:LATEST]->(p_dtype_val), (p_dtype_r)-[:HAS_ATTRIBUTES_ROOT]->(ctattr_dtype)-[:LATEST]->(p_dtype_attr_val)\nwith distinct p_act as p_act,p_ai as p_ai,p_aicr as p_aicr,p_aitm1 as p_aitm1,p_aitm1r as p_aitm1r,p_aitmc1r as p_aitmc1r,p_aitmc1 as p_aitmc1,p_ct2cd as p_ct2cd,p_ct2_sponsor as p_ct2_sponsor,p_ct2_cdisc as p_ct2_cdisc,p_unitdefr as p_unitdefr,p_unitdef as p_unitdef,p_role_r as p_role_r, p_role_val as p_role_val, p_role_attr_val as p_role_attr_val,p_dtype_r as p_dtype_r, p_dtype_val as p_dtype_val, p_dtype_attr_val as p_dtype_attr_val,\nagrp as agrp,asgrp as asgrp,act as act,ai as ai,aic as aic,aitm1 as aitm1,aitmc1 as aitmc1,aicp as aicp,aicpp as aicpp,r1 as r1,r2 as r2,\nr3 as r3,r4 as r4,r5 as r5,r6 as r6, r7 as r7, r8 as r8, r9 as r9\nWITH distinct p_act,p_ai,p_aicr,p_aitm1,p_aitm1r,p_aitmc1r,p_aitmc1,p_ct2cd,p_unitdefr,p_unitdef,p_ct2_sponsor,p_ct2_cdisc,p_role_r,p_role_val,p_role_attr_val,p_dtype_r,p_dtype_val,p_dtype_attr_val,agrp,\nasgrp,act,ai,aic,aicp,aicpp,aitm1,aitmc1,r1,r2,r3,r4,r5,r6,r7,r8,r9,\nCASE WHEN p_ct2cd is not null THEN\napoc.create.vNode([\"CTTerm\"],apoc.map.merge(properties(p_ct2_cdisc),properties(p_ct2_sponsor))) END as ct2,\nCASE WHEN p_unitdefr is not null THEN\napoc.create.vNode([\"CTTerm\"],properties(p_unitdef)) END as unit_ct,\nCASE WHEN p_role_r is not null THEN apoc.create.vNode([\"CTTerm\"],apoc.map.merge(properties(p_role_val),properties(p_role_attr_val))) END as role,\nCASE WHEN p_dtype_r is not null THEN apoc.create.vNode([\"CTTerm\"],apoc.map.merge(properties(p_dtype_val),properties(p_dtype_attr_val))) END as dtype\nWITH distinct p_act,p_ai,p_aicr,p_aitm1,p_aitm1r,p_aitmc1r,p_aitmc1,p_ct2cd,p_unitdefr,p_unitdef,p_ct2_sponsor,p_ct2_cdisc,p_role_r,p_dtype_r,agrp,asgrp,act,\nai,aic,aicp,aicpp,aitm1,aitmc1,ct2,unit_ct,role,dtype,r1,r2,r3,r4,r5,r6,r7,r8,r9,\nCASE WHEN p_ct2cd is not null THEN\napoc.create.vRelationship(aitm1,\"FOR\",{type:\"logical\"},ct2) END as r16, \nCASE WHEN p_unitdefr is not null THEN\napoc.create.vRelationship(aitm1,\"FOR\",{type:\"logical\"},unit_ct) END as r18,\nCASE WHEN p_role_r is not null THEN apoc.create.vRelationship(aitmc1,\"HAS_ROLE\",{type:\"logical\"},role)END as r20,\nCASE WHEN p_dtype_r is not null THEN apoc.create.vRelationship(aitmc1,\"HAS_TYPE\",{type:\"logical\"},dtype) END as r21\nwith distinct  p_act,p_ai,p_aicr,p_aitm1,p_aitm1r,p_aitmc1r,p_aitmc1,p_ct2cd,p_unitdef,p_unitdefr,p_ct2_sponsor,p_ct2_cdisc,agrp,asgrp,act,ai,aic,aicp,aicpp,aitm1,aitmc1,ct2,unit_ct,role,dtype,r1,r2,r3,r4,r5,r6,r7,r8,r9,r16,r18,r20,r21\nOPTIONAL MATCH(p_ct2cd)<-[R22:HAS_TERM]-(clr:CTCodelistRoot)-[R23:HAS_ATTRIBUTES_ROOT]->(clatt:CTCodelistAttributesRoot),(clr)-[R24:HAS_NAME_ROOT]->(clattr:CTCodelistNameRoot)-[:LATEST]-(p_cl_sponsor),(clatt)-[:LATEST]->(p_cl_cdisc:CTCodelistAttributesValue),(pc:CTPackageCodelist) where ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-(pc) and pc.uid CONTAINS \"SDTM\") or NOT ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-())\nOPTIONAL MATCH (p_unitdef:UnitDefinitionValue)-[:HAS_CT_DIMENSION]-(unit_term:CTTermRoot)<-[:HAS_TERM]-(cl_root)-[:HAS_ATTRIBUTES_ROOT]->(clattr2)-[:LATEST]->(unit_cld)\nwith distinct p_act as p_act,p_ai as p_ai,p_aicr as p_aicr,p_aitm1 as p_aitm1,p_aitm1r as p_aitm1r,p_aitmc1r as p_aitmc1r,p_aitmc1 as p_aitmc1,p_ct2cd as p_ct2cd,p_unitdefr as p_unitdefr,clr as clr,p_cl_sponsor as p_cl_sponsor,p_cl_cdisc as p_cl_cdisc, unit_cld as unit_cld,agrp as agrp,asgrp as asgrp,act as act,ai as ai,aic as aic,aitm1 as aitm1,aitmc1 as aitmc1,aicp as aicp,aicpp as aicpp,ct2 as ct2,unit_ct as unit_ct, role as role, dtype as dtype, r1 as r1,r2 as r2,r3 as r3,r4 as r4,r5 as r5,r6 as r6,r7 as r7,r8 as r8,r9 as r9,r16 as r16,r18 as r18,r20 as r20,r21 as r21\nWITH p_act,p_ai,p_aicr,p_aitm1,p_aitm1r,p_aitmc1r,p_aitmc1,p_ct2cd,p_unitdefr,clr,p_cl_sponsor,p_cl_cdisc, unit_cld,agrp,asgrp,act,ai,aic,aicp,aicpp,aitm1,aitmc1,ct2,unit_ct,role,dtype,r1,r2,r3,r4,r5,r6,r7,r8,r9,r16,r18,r20,r21,\nCASE WHEN p_ct2cd is not null THEN apoc.create.vNode([\"CTCodeList\"],apoc.map.merge(properties(p_cl_cdisc),properties(p_cl_sponsor))) END as cl,\nCASE WHEN p_unitdefr is not null THEN\napoc.create.vNode([\"CTCodeList\"],properties(unit_cld)) END as unit_cl\nWITH distinct p_act as p_act,p_ai as p_ai,p_aicr  as p_aicr,p_aitm1  as p_aitm1,p_aitm1r as p_aitm1r,p_aitmc1r as p_aitmc1r,p_aitmc1 as p_aitmc1,p_ct2cd  as p_ct2cd,p_unitdefr as p_unitdefr,agrp as agrp,asgrp as asgrp,act as act,ai as ai,aic as aic,aicp as aicp,aicpp as aicpp,aitm1 as aitm1,aitmc1 as aitmc1,ct2 as ct2,cl as cl,unit_ct as unit_ct,unit_cl as unit_cl, role as role, dtype as dtype,r1 as r1,r2 as r2,r3 as r3,r4 as r4,r5 as r5,r6 as r6,r7 as r7,r8 as r8,r9 as r9,r16 as r16,r18 as r18, r20 as r20, r21 as r21\nWITH p_act,p_ai,p_aicr,p_aitm1,p_aitm1r,p_aitmc1r,p_aitmc1,p_ct2cd,p_unitdefr,agrp,asgrp,act,ai,aic,aicp,aicpp,aitm1,aitmc1,ct2,cl,unit_ct,unit_cl,role,dtype,r1,r2,r3,r4,r5,r6,r7,r8,r9,r16,r18,r20,r21,\nCASE WHEN p_ct2cd is not null THEN\napoc.create.vRelationship(cl,\"HAS\",{type:\"logical\"},ct2) END as r17,\nCASE WHEN p_unitdefr is not null THEN\napoc.create.vRelationship(unit_ct,\"HAS\",{type:\"logical\"},unit_cl) END as r19\nreturn distinct agrp,asgrp,act,ai,aic,aicp,aicpp,aitm1,aitmc1,ct2,cl,unit_ct,unit_cl,role, dtype, r1,r2,r3,r4,r5,r6,r7,r8,r9,r16,r17,r18,r19,r20,r21','read','Displays an activity in a logical manner based on name of activity.To call the procedure write: call custom.activityAsLogical(\"<activity.name>\"), e.g. call custom.activityAsLogical(\"Albumin\")')\n\n\nCALL apoc.custom.declareProcedure(\n  'activityInstanceAsLogical(name::STRING) :: (row::MAP)','MATCH (p_agrp:ActivityGroupValue)<-[R1:IN_GROUP]-(p_asgrp:ActivitySubGroupValue)<-[R2:IN_SUB_GROUP]-(p_act:ActivityValue)\nWITH p_agrp, p_asgrp,p_act,\napoc.create.vNode([\"ActivityGroup\"], properties(p_agrp)) as agrp,\napoc.create.vNode([\"ActivitySubGroup\"],properties(p_asgrp)) as asgrp,\napoc.create.vNode([\"Activity\"],properties(p_act)) as act\nWITH p_act,agrp,asgrp,act,\napoc.create.vRelationship(agrp,\"HAS\",{type:\"logical\"},asgrp) as r1,\napoc.create.vRelationship(asgrp,\"HAS\",{type:\"logical\"},act) as r2\nwith p_act,agrp,asgrp,act,r1,r2\nMATCH(p_act)<-[R3:IN_HIERARCHY]-(p_ai:ActivityInstanceValue)<-[R42:LATEST]-(p_ai_r:ActivityInstanceRoot),(p_ai)-[R4:ACTIVITY_INSTANCE_CLASS]->(p_aicr:ActivityInstanceClassRoot)-[R5:LATEST]->(p_aic:ActivityInstanceClassValue) where p_ai.adam_param_code=$name\nWITH p_act,p_ai,p_aicr,p_aic,agrp,asgrp,act,r1,r2,\napoc.create.vNode([\"ActivityInstance\"],properties(p_ai)) as ai,\napoc.create.vNode([\"ActivityInstanceClass\"],properties(p_aic)) as aic\nWITH p_act,p_ai,p_aicr,p_aic,agrp,asgrp,act,ai,aic,r1,r2,\napoc.create.vRelationship(act,\"HAS\",{type:\"logical\"},ai) as r3,\napoc.create.vRelationship(ai,\"OF_CLASS\",{type:\"logical\"},aic) as r6\nWITH p_act,p_ai,p_aicr,p_aic,agrp,asgrp,act,ai,aic,r1,r2,r3,r6\nMATCH (p_ai:ActivityInstanceValue)-[R4:CONTAINS_ACTIVITY_ITEM]->(p_aitm1:ActivityItemValue)\nOPTIONAL MATCH(p_aitm1)<-[R5:LATEST]-(p_aitm1r:ActivityItemRoot)<-[R6:HAS_ACTIVITY_ITEM]-(p_aitmc1r:ActivityItemClassRoot)-[R7:LATEST]->(p_aitmc1:ActivityItemClassValue)\nOPTIONAL MATCH (p_aicr)-[R10:PARENT_CLASS]->(p_aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(p_aicp:ActivityInstanceClassValue)\nOPTIONAL MATCH (p_aicrp)-[R12:PARENT_CLASS]->(p_aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(p_aicpp:ActivityInstanceClassValue)\nOPTIONAL MATCH(p_aitmc1r)<-[R14:HAS_ITEM_CLASS]-(p_aicr)\nOPTIONAL MATCH(p_aitmc1r)<-[R15:HAS_ITEM_CLASS]-(p_aicrp)\nOPTIONAL MATCH(p_aitmc1r)<-[R16:HAS_ITEM_CLASS]-(p_aicrpp) \nWITH p_act,p_ai,p_aicr,p_aic,p_aitm1,p_aitm1r,p_aitmc1r,p_aitmc1,p_aicp,p_aicpp,R14,R15,R16,agrp,asgrp,act,ai,aic,r1,r2,r3,r6,\napoc.create.vNode([\"ActivityItem\"],properties(p_aitm1)) as aitm1,\napoc.create.vNode([\"ActivityItemClass\"],properties(p_aitmc1)) as aitmc1,\nCASE WHEN R15 is not null THEN apoc.create.vNode([\"ActivityInstanceClass\"],properties(p_aicp)) END as aicp,\nCASE WHEN R16 is not null THEN apoc.create.vNode([\"ActivityInstanceClass\"],properties(p_aicpp)) END as aicpp\nWITH p_act,p_ai,p_aicr,p_aic,p_aitm1,p_aitm1r,p_aitmc1r,p_aitmc1,R14,R15,R16,agrp,asgrp,act,ai,aic,aicp,aicpp,aitm1,aitmc1,r1,r2,r3,r6,\napoc.create.vRelationship(ai,\"HAS\",{type:\"logical\"},aitm1) as r4,\napoc.create.vRelationship(aitm1,\"OF_CLASS\",{type:\"logical\"},aitmc1) as r5,\nCASE WHEN (R14 is not null) THEN \napoc.create.vRelationship(aitmc1,\"OF_CLASS\",{type:\"logical\"},aic) END as r7,\nCASE WHEN (R15 is not null) \nTHEN apoc.create.vRelationship(aitmc1,\"OF_CLASS\",{type:\"logical\"},aicp) END as r8,\nCASE WHEN (R16 is not null) \nTHEN apoc.create.vRelationship(aitmc1,\"OF_CLASS\",{type:\"logical\"},aicpp) END as r9\nwith p_act,p_ai,p_aicr,p_aic,p_aitm1,p_aitm1r,p_aitmc1r,p_aitmc1,agrp,asgrp,act,ai,aic,aitm1,aitmc1,aicp,aicpp,r1,r2,r3,r4,r5,r6,r7,r8,r9\nOPTIONAL MATCH (p_aitm1)-[R17]->(p_ct2cd:CTTermRoot)-[R18:HAS_NAME_ROOT]->(ct2cdr:CTTermNameRoot)-[R19:LATEST]->(p_ct2_sponsor), (p_ct2cd)-[R20:HAS_ATTRIBUTES_ROOT]->(ct2att:CTTermAttributesRoot)-[R21:LATEST]->(p_ct2_cdisc)\nOPTIONAL MATCH (p_aitm1)-[:HAS_UNIT_DEFINITION]->(p_unitdefr:UnitDefinitionRoot)-[:LATEST]->(p_unitdef:UnitDefinitionValue)\nOPTIONAL MATCH(p_aitmc1)-[:HAS_ROLE]->(p_role_r:CTTermRoot)-[:HAS_NAME_ROOT]->(ctnr_role)-[:LATEST]->(p_role_val), (p_role_r)-[:HAS_ATTRIBUTES_ROOT]->(ctattr)-[:LATEST]->(p_role_attr_val)\nOPTIONAL MATCH(p_aitmc1)-[:HAS_DATA_TYPE]->(p_dtype_r)-[:HAS_NAME_ROOT]->(ctnr_dtype)-[:LATEST]->(p_dtype_val), (p_dtype_r)-[:HAS_ATTRIBUTES_ROOT]->(ctattr_dtype)-[:LATEST]->(p_dtype_attr_val)\nwith distinct p_act as p_act,p_ai as p_ai,p_aicr as p_aicr,p_aitm1 as p_aitm1,p_aitm1r as p_aitm1r,p_aitmc1r as p_aitmc1r,p_aitmc1 as p_aitmc1,p_ct2cd as p_ct2cd,p_ct2_sponsor as p_ct2_sponsor,p_ct2_cdisc as p_ct2_cdisc,p_unitdefr as p_unitdefr,p_unitdef as p_unitdef,p_role_r as p_role_r, p_role_val as p_role_val, p_role_attr_val as p_role_attr_val,p_dtype_r as p_dtype_r, p_dtype_val as p_dtype_val, p_dtype_attr_val as p_dtype_attr_val,\nagrp as agrp,asgrp as asgrp,act as act,ai as ai,aic as aic,aitm1 as aitm1,aitmc1 as aitmc1,aicp as aicp,aicpp as aicpp,r1 as r1,r2 as r2,\nr3 as r3,r4 as r4,r5 as r5,r6 as r6, r7 as r7, r8 as r8, r9 as r9\nWITH distinct p_act,p_ai,p_aicr,p_aitm1,p_aitm1r,p_aitmc1r,p_aitmc1,p_ct2cd,p_unitdefr,p_unitdef,p_ct2_sponsor,p_ct2_cdisc,p_role_r,p_role_val,p_role_attr_val,p_dtype_r,p_dtype_val,p_dtype_attr_val,agrp,\nasgrp,act,ai,aic,aicp,aicpp,aitm1,aitmc1,r1,r2,r3,r4,r5,r6,r7,r8,r9,\nCASE WHEN p_ct2cd is not null THEN\napoc.create.vNode([\"CTTerm\"],apoc.map.merge(properties(p_ct2_cdisc),properties(p_ct2_sponsor))) END as ct2,\nCASE WHEN p_unitdefr is not null THEN\napoc.create.vNode([\"CTTerm\"],properties(p_unitdef)) END as unit_ct,\nCASE WHEN p_role_r is not null THEN apoc.create.vNode([\"CTTerm\"],apoc.map.merge(properties(p_role_val),properties(p_role_attr_val))) END as role,\nCASE WHEN p_dtype_r is not null THEN apoc.create.vNode([\"CTTerm\"],apoc.map.merge(properties(p_dtype_val),properties(p_dtype_attr_val))) END as dtype\nWITH distinct p_act,p_ai,p_aicr,p_aitm1,p_aitm1r,p_aitmc1r,p_aitmc1,p_ct2cd,p_unitdefr,p_unitdef,p_ct2_sponsor,p_ct2_cdisc,p_role_r,p_dtype_r,agrp,asgrp,act,\nai,aic,aicp,aicpp,aitm1,aitmc1,ct2,unit_ct,role,dtype,r1,r2,r3,r4,r5,r6,r7,r8,r9,\nCASE WHEN p_ct2cd is not null THEN\napoc.create.vRelationship(aitm1,\"FOR\",{type:\"logical\"},ct2) END as r16, \nCASE WHEN p_unitdefr is not null THEN\napoc.create.vRelationship(aitm1,\"FOR\",{type:\"logical\"},unit_ct) END as r18,\nCASE WHEN p_role_r is not null THEN apoc.create.vRelationship(aitmc1,\"HAS_ROLE\",{type:\"logical\"},role)END as r20,\nCASE WHEN p_dtype_r is not null THEN apoc.create.vRelationship(aitmc1,\"HAS_TYPE\",{type:\"logical\"},dtype) END as r21\nwith distinct  p_act,p_ai,p_aicr,p_aitm1,p_aitm1r,p_aitmc1r,p_aitmc1,p_ct2cd,p_unitdef,p_unitdefr,p_ct2_sponsor,p_ct2_cdisc,agrp,asgrp,act,ai,aic,aicp,aicpp,aitm1,aitmc1,ct2,unit_ct,role,dtype,r1,r2,r3,r4,r5,r6,r7,r8,r9,r16,r18,r20,r21\nOPTIONAL MATCH(p_ct2cd)<-[R22:HAS_TERM]-(clr:CTCodelistRoot)-[R23:HAS_ATTRIBUTES_ROOT]->(clatt:CTCodelistAttributesRoot),(clr)-[R24:HAS_NAME_ROOT]->(clattr:CTCodelistNameRoot)-[:LATEST]-(p_cl_sponsor),(clatt)-[:LATEST]->(p_cl_cdisc:CTCodelistAttributesValue),(pc:CTPackageCodelist) where ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-(pc) and pc.uid CONTAINS \"SDTM\") or NOT ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-())\nOPTIONAL MATCH (p_unitdef:UnitDefinitionValue)-[:HAS_CT_DIMENSION]-(unit_term:CTTermRoot)<-[:HAS_TERM]-(cl_root)-[:HAS_ATTRIBUTES_ROOT]->(clattr2)-[:LATEST]->(unit_cld)\nwith distinct p_act as p_act,p_ai as p_ai,p_aicr as p_aicr,p_aitm1 as p_aitm1,p_aitm1r as p_aitm1r,p_aitmc1r as p_aitmc1r,p_aitmc1 as p_aitmc1,p_ct2cd as p_ct2cd,p_unitdefr as p_unitdefr,clr as clr,p_cl_sponsor as p_cl_sponsor,p_cl_cdisc as p_cl_cdisc, unit_cld as unit_cld,agrp as agrp,asgrp as asgrp,act as act,ai as ai,aic as aic,aitm1 as aitm1,aitmc1 as aitmc1,aicp as aicp,aicpp as aicpp,ct2 as ct2,unit_ct as unit_ct, role as role, dtype as dtype, r1 as r1,r2 as r2,r3 as r3,r4 as r4,r5 as r5,r6 as r6,r7 as r7,r8 as r8,r9 as r9,r16 as r16,r18 as r18,r20 as r20,r21 as r21\nWITH p_act,p_ai,p_aicr,p_aitm1,p_aitm1r,p_aitmc1r,p_aitmc1,p_ct2cd,p_unitdefr,clr,p_cl_sponsor,p_cl_cdisc, unit_cld,agrp,asgrp,act,ai,aic,aicp,aicpp,aitm1,aitmc1,ct2,unit_ct,role,dtype,r1,r2,r3,r4,r5,r6,r7,r8,r9,r16,r18,r20,r21,\nCASE WHEN p_ct2cd is not null THEN apoc.create.vNode([\"CTCodeList\"],apoc.map.merge(properties(p_cl_cdisc),properties(p_cl_sponsor))) END as cl,\nCASE WHEN p_unitdefr is not null THEN\napoc.create.vNode([\"CTCodeList\"],properties(unit_cld)) END as unit_cl\nWITH distinct p_act as p_act,p_ai as p_ai,p_aicr  as p_aicr,p_aitm1  as p_aitm1,p_aitm1r as p_aitm1r,p_aitmc1r as p_aitmc1r,p_aitmc1 as p_aitmc1,p_ct2cd  as p_ct2cd,p_unitdefr as p_unitdefr,agrp as agrp,asgrp as asgrp,act as act,ai as ai,aic as aic,aicp as aicp,aicpp as aicpp,aitm1 as aitm1,aitmc1 as aitmc1,ct2 as ct2,cl as cl,unit_ct as unit_ct,unit_cl as unit_cl, role as role, dtype as dtype,r1 as r1,r2 as r2,r3 as r3,r4 as r4,r5 as r5,r6 as r6,r7 as r7,r8 as r8,r9 as r9,r16 as r16,r18 as r18, r20 as r20, r21 as r21\nWITH p_act,p_ai,p_aicr,p_aitm1,p_aitm1r,p_aitmc1r,p_aitmc1,p_ct2cd,p_unitdefr,agrp,asgrp,act,ai,aic,aicp,aicpp,aitm1,aitmc1,ct2,cl,unit_ct,unit_cl,role,dtype,r1,r2,r3,r4,r5,r6,r7,r8,r9,r16,r18,r20,r21,\nCASE WHEN p_ct2cd is not null THEN\napoc.create.vRelationship(cl,\"HAS\",{type:\"logical\"},ct2) END as r17,\nCASE WHEN p_unitdefr is not null THEN\napoc.create.vRelationship(unit_ct,\"HAS\",{type:\"logical\"},unit_cl) END as r19\nreturn distinct agrp,asgrp,act,ai,aic,aicp,aicpp,aitm1,aitmc1,ct2,cl,unit_ct,unit_cl,role, dtype, r1,r2,r3,r4,r5,r6,r7,r8,r9,r16,r17,r18,r19,r20,r21','read','Displays an activity in a logical manner based on name of activity instance adam_param_code.To call the procedure write: call custom.activityInstanceAsLogical(\"<activityinstance.adam_param_code>\"), e.g. call custom.activityAsLogical(\"ALB\")')\nCALL apoc.custom.declareProcedure('get_nci_concept_definition(ccode::STRING) :: (conceptDefinition::STRING)','\nCALL apoc.load.json(\"https://api-evsrest.nci.nih.gov/api/v1/concept/ncit/\"+$ccode) YIELD value WITH value, [def IN value.definitions where def.source=\"NCI\"] as def return def[0][\"definition\"] as conceptDefinition')\nCALL apoc.custom.declareProcedure('get_nci_concept_synonyms(ccode::STRING) :: (conceptSynonyms::STRING)',' CALL apoc.load.json(\"https://api-evsrest.nci.nih.gov/api/v1/concept/ncit/\"+$ccode+\"?include=synonyms\") YIELD value WITH value, [sym IN value.synonyms where sym.source=\"NCI\"] as sym return sym[0][\"name\"] as conceptSynonyms')\nreturn 'Procedures loaded'",
          "width": 7,
          "height": 2,
          "x": 5,
          "y": 0,
          "type": "value",
          "selection": {},
          "settings": {
            "autorun": false,
            "refreshButtonEnabled": true,
            "fontSize": 12,
            "backgroundColor": "#5198de"
          }
        },
        {
          "title": "List of custom procedures",
          "query": "CALL apoc.cypher.run(\"call apoc.custom.list()\", {})\nYIELD value\nRETURN value.name as Name,  \nvalue.description as Description,\nvalue.inputs[0] as Input\n\n",
          "width": 12,
          "height": 2,
          "x": 0,
          "y": 2,
          "type": "table",
          "selection": {},
          "settings": {
            "columnWidths": "[1,6,0.5]",
            "refreshButtonEnabled": true
          }
        }
      ]
    },
    {
      "title": "Activity Library Content",
      "reports": [
        {
          "title": "List of Activities",
          "query": "CALL apoc.case([not $neodash_activityinstanceclassvalue_name='' and $neodash_activityinstanceclassvalue_name_subtype='' and $neodash_activitygroupvalue_name='' and $neodash_activitysubgroupvalue_name='', 'MATCH (agrp:ActivityGroupValue)<-[r1:IN_GROUP]-(asgrp:ActivitySubGroupValue)<-[r2:IN_SUB_GROUP]-(act:ActivityValue)<-[r3:IN_HIERARCHY]-(ai:ActivityInstanceValue)-[r4:CONTAINS_ACTIVITY_ITEM]->(aitm1:ActivityItemValue),(ai)-[r5:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[:LATEST]->(aic:ActivityInstanceClassValue),(aicr)-[r7:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[:LATEST]->(aicp:ActivityInstanceClassValue) where aicp.name in [$a] return distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.adam_param_code as ActivityInstance', not $neodash_activityinstanceclassvalue_name='' and $neodash_activityinstanceclassvalue_name_subtype='' and not $neodash_activitygroupvalue_name='' and $neodash_activitysubgroupvalue_name='', 'MATCH (agrp:ActivityGroupValue)<-[r1:IN_GROUP]-(asgrp:ActivitySubGroupValue)<-[r2:IN_SUB_GROUP]-(act:ActivityValue)<-[r3:IN_HIERARCHY]-(ai:ActivityInstanceValue)-[r4:CONTAINS_ACTIVITY_ITEM]->(aitm1:ActivityItemValue),          (ai)-[r5:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[:LATEST]->(aic:ActivityInstanceClassValue),(aicr)-[r7:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[:LATEST]->(aicp:ActivityInstanceClassValue) where aicp.name in [$a] and agrp.name in [$b] return distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.adam_param_code as ActivityInstance', not $neodash_activityinstanceclassvalue_name='' and $neodash_activityinstanceclassvalue_name_subtype='' and $neodash_activitygroupvalue_name='' and not $neodash_activitysubgroupvalue_name='', 'MATCH (agrp:ActivityGroupValue)<-[r1:IN_GROUP]-(asgrp:ActivitySubGroupValue)<-[r2:IN_SUB_GROUP]-(act:ActivityValue)<-[r3:IN_HIERARCHY]-(ai:ActivityInstanceValue)-[r4:CONTAINS_ACTIVITY_ITEM]->(aitm1:ActivityItemValue),(ai)-[r5:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[:LATEST]->(aic:ActivityInstanceClassValue),(aicr)-[r7:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[:LATEST]->(aicp:ActivityInstanceClassValue) where aicp.name in [$a] and asgrp.name in [$c] return distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.adam_param_code as ActivityInstance', $neodash_activityinstanceclassvalue_name='' and $neodash_activityinstanceclassvalue_name_subtype='' and $neodash_activitygroupvalue_name='' and not $neodash_activitysubgroupvalue_name='','MATCH (agrp:ActivityGroupValue)<-[r1:IN_GROUP]-(asgrp:ActivitySubGroupValue)<-[r2:IN_SUB_GROUP]-(act:ActivityValue)<-[r3:IN_HIERARCHY]-(ai:ActivityInstanceValue)-[r4:CONTAINS_ACTIVITY_ITEM]->(aitm1:ActivityItemValue),(ai)-[r5:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[:LATEST]->(aic:ActivityInstanceClassValue),(aicr)-[r7:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[:LATEST]->(aicp:ActivityInstanceClassValue) where asgrp.name in [$c] return distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.adam_param_code as ActivityInstance',$neodash_activityinstanceclassvalue_name='' and $neodash_activityinstanceclassvalue_name_subtype='' and not $neodash_activitygroupvalue_name='' and $neodash_activitysubgroupvalue_name='','MATCH (agrp:ActivityGroupValue)<-[r1:IN_GROUP]-(asgrp:ActivitySubGroupValue)<-[r2:IN_SUB_GROUP]-(act:ActivityValue)<-[r3:IN_HIERARCHY]-(ai:ActivityInstanceValue)-[r4:CONTAINS_ACTIVITY_ITEM]->(aitm1:ActivityItemValue),(ai)-[r5:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[:LATEST]->(aic:ActivityInstanceClassValue),(aicr)-[r7:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[:LATEST]->(aicp:ActivityInstanceClassValue) where agrp.name in [$b] return distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.adam_param_code as ActivityInstance',$neodash_activityinstanceclassvalue_name='' and  $neodash_activityinstanceclassvalue_name_subtype='' and not $neodash_activitygroupvalue_name='' and not $neodash_activitysubgroupvalue_name='','MATCH (agrp:ActivityGroupValue)<-[r1:IN_GROUP]-(asgrp:ActivitySubGroupValue)<-[r2:IN_SUB_GROUP]-(act:ActivityValue)<-[r3:IN_HIERARCHY]-(ai:ActivityInstanceValue)-[r4:CONTAINS_ACTIVITY_ITEM]->(aitm1:ActivityItemValue),(ai)-[r5:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[:LATEST]->(aic:ActivityInstanceClassValue),(aicr)-[r7:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[:LATEST]->(aicp:ActivityInstanceClassValue) where agrp.name in [$b] and asgrp.name in [$c] return distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.adam_param_code as ActivityInstance',not $neodash_activityinstanceclassvalue_name='' and  $neodash_activityinstanceclassvalue_name_subtype='' and not $neodash_activitygroupvalue_name='' and not $neodash_activitysubgroupvalue_name='','MATCH (agrp:ActivityGroupValue)<-[r1:IN_GROUP]-(asgrp:ActivitySubGroupValue)<-[r2:IN_SUB_GROUP]-(act:ActivityValue)<-[r3:IN_HIERARCHY]-(ai:ActivityInstanceValue)-[r4:CONTAINS_ACTIVITY_ITEM]->(aitm1:ActivityItemValue),(ai)-[r5:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[:LATEST]->(aic:ActivityInstanceClassValue),(aicr)-[r7:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[:LATEST]->(aicp:ActivityInstanceClassValue) where aicp.name in [$a] and agrp.name in [$b] and asgrp.name in [$c] return distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.adam_param_code as ActivityInstance',$neodash_activityinstanceclassvalue_name='' and not $neodash_activityinstanceclassvalue_name_subtype='' and $neodash_activitygroupvalue_name='' and  $neodash_activitysubgroupvalue_name='','MATCH (agrp:ActivityGroupValue)<-[r1:IN_GROUP]-(asgrp:ActivitySubGroupValue)<-[r2:IN_SUB_GROUP]-(act:ActivityValue)<-[r3:IN_HIERARCHY]-(ai:ActivityInstanceValue)-[r4:CONTAINS_ACTIVITY_ITEM]->(aitm1:ActivityItemValue),(ai)-[r5:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[:LATEST]->(aic:ActivityInstanceClassValue),(aicr)-[r7:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[:LATEST]->(aicp:ActivityInstanceClassValue) where aic.name in [$d] return distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.adam_param_code as ActivityInstance',not $neodash_activityinstanceclassvalue_name='' and not $neodash_activityinstanceclassvalue_name_subtype='' and $neodash_activitygroupvalue_name='' and  $neodash_activitysubgroupvalue_name='','MATCH (agrp:ActivityGroupValue)<-[r1:IN_GROUP]-(asgrp:ActivitySubGroupValue)<-[r2:IN_SUB_GROUP]-(act:ActivityValue)<-[r3:IN_HIERARCHY]-(ai:ActivityInstanceValue)-[r4:CONTAINS_ACTIVITY_ITEM]->(aitm1:ActivityItemValue),(ai)-[r5:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[:LATEST]->(aic:ActivityInstanceClassValue),(aicr)-[r7:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[:LATEST]->(aicp:ActivityInstanceClassValue) where aicp.name in [$a] and aic.name in [$d] return distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.adam_param_code as ActivityInstance',$neodash_activityinstanceclassvalue_name='' and not $neodash_activityinstanceclassvalue_name_subtype='' and not $neodash_activitygroupvalue_name='' and  $neodash_activitysubgroupvalue_name='','MATCH (agrp:ActivityGroupValue)<-[r1:IN_GROUP]-(asgrp:ActivitySubGroupValue)<-[r2:IN_SUB_GROUP]-(act:ActivityValue)<-[r3:IN_HIERARCHY]-(ai:ActivityInstanceValue)-[r4:CONTAINS_ACTIVITY_ITEM]->(aitm1:ActivityItemValue),(ai)-[r5:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[:LATEST]->(aic:ActivityInstanceClassValue),(aicr)-[r7:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[:LATEST]->(aicp:ActivityInstanceClassValue) where agrp.name in [$b] and aic.name in [$d] return distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.adam_param_code as ActivityInstance',$neodash_activityinstanceclassvalue_name='' and not $neodash_activityinstanceclassvalue_name_subtype='' and $neodash_activitygroupvalue_name='' and not $neodash_activitysubgroupvalue_name='','MATCH (agrp:ActivityGroupValue)<-[r1:IN_GROUP]-(asgrp:ActivitySubGroupValue)<-[r2:IN_SUB_GROUP]-(act:ActivityValue)<-[r3:IN_HIERARCHY]-(ai:ActivityInstanceValue)-[r4:CONTAINS_ACTIVITY_ITEM]->(aitm1:ActivityItemValue),(ai)-[r5:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[:LATEST]->(aic:ActivityInstanceClassValue),(aicr)-[r7:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[:LATEST]->(aicp:ActivityInstanceClassValue) where asgrp.name in [$c] and aic.name in [$d] return distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.adam_param_code as ActivityInstance',not $neodash_activityinstanceclassvalue_name='' and not $neodash_activityinstanceclassvalue_name_subtype='' and not $neodash_activitygroupvalue_name='' and  $neodash_activitysubgroupvalue_name='','MATCH (agrp:ActivityGroupValue)<-[r1:IN_GROUP]-(asgrp:ActivitySubGroupValue)<-[r2:IN_SUB_GROUP]-(act:ActivityValue)<-[r3:IN_HIERARCHY]-(ai:ActivityInstanceValue)-[r4:CONTAINS_ACTIVITY_ITEM]->(aitm1:ActivityItemValue),(ai)-[r5:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[:LATEST]->(aic:ActivityInstanceClassValue),(aicr)-[r7:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[:LATEST]->(aicp:ActivityInstanceClassValue) where aicp.name in [$a] and agrp.name in [$b] and aic.name in [$d] return distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.adam_param_code as ActivityInstance',not $neodash_activityinstanceclassvalue_name='' and not $neodash_activityinstanceclassvalue_name_subtype='' and $neodash_activitygroupvalue_name='' and not $neodash_activitysubgroupvalue_name='','MATCH (agrp:ActivityGroupValue)<-[r1:IN_GROUP]-(asgrp:ActivitySubGroupValue)<-[r2:IN_SUB_GROUP]-(act:ActivityValue)<-[r3:IN_HIERARCHY]-(ai:ActivityInstanceValue)-[r4:CONTAINS_ACTIVITY_ITEM]->(aitm1:ActivityItemValue),(ai)-[r5:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[:LATEST]->(aic:ActivityInstanceClassValue),(aicr)-[r7:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[:LATEST]->(aicp:ActivityInstanceClassValue) where aicp.name in [$a] and asgrp.name in [$c] and aic.name in [$d] return distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.adam_param_code as ActivityInstance',$neodash_activityinstanceclassvalue_name='' and not $neodash_activityinstanceclassvalue_name_subtype='' and not $neodash_activitygroupvalue_name='' and not $neodash_activitysubgroupvalue_name='','MATCH (agrp:ActivityGroupValue)<-[r1:IN_GROUP]-(asgrp:ActivitySubGroupValue)<-[r2:IN_SUB_GROUP]-(act:ActivityValue)<-[r3:IN_HIERARCHY]-(ai:ActivityInstanceValue)-[r4:CONTAINS_ACTIVITY_ITEM]->(aitm1:ActivityItemValue),(ai)-[r5:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[:LATEST]->(aic:ActivityInstanceClassValue),(aicr)-[r7:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[:LATEST]->(aicp:ActivityInstanceClassValue) where agrp.name in [$b] and asgrp.name in [$c] and aic.name in [$d] return distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.adam_param_code as ActivityInstance'],'MATCH (agrp:ActivityGroupValue)<-[r1:IN_GROUP]-(asgrp:ActivitySubGroupValue)<-[r2:IN_SUB_GROUP]-(act:ActivityValue)<-[r3:IN_HIERARCHY]-(ai:ActivityInstanceValue)-[r4:CONTAINS_ACTIVITY_ITEM]->(aitm1:ActivityItemValue),(ai)-[r5:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[:LATEST]->(aic:ActivityInstanceClassValue),(aicr)-[r7:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[:LATEST]->(aicp:ActivityInstanceClassValue) where aicp.name in [$a] and agrp.name in [$b] and asgrp.name in [$c] and aic.name in [$d] return distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.adam_param_code as ActivityInstance',{a:$neodash_activityinstanceclassvalue_name,b:$neodash_activitygroupvalue_name, c:$neodash_activitysubgroupvalue_name,d: $neodash_activityinstanceclassvalue_name_subtype}) YIELD value return value.ActivityType as `Activity Type`,value.ActivitySubType as `Activity Sub-Type`, value.ActivityGroup as `Activity Group` ,value.ActivitySubGroup as `Activity SubGroup` , value.Activity as Activity, value.ActivityInstance as `Activity Instance` order by Activity, `Activity Instance`",
          "width": 10,
          "height": 2,
          "x": 0,
          "y": 3,
          "type": "table",
          "selection": {},
          "settings": {
            "compact": false,
            "actionsRules": [
              {
                "condition": "Click",
                "field": "Activity",
                "value": "Activity",
                "customization": "set variable",
                "customizationValue": "activity"
              },
              {
                "condition": "Click",
                "field": "Activity Instance",
                "value": "Activity Instance",
                "customization": "set variable",
                "customizationValue": "activity_instance"
              }
            ],
            "transposed": false,
            "columnWidths": "[0.5,0.5,1,1,1,0.6]",
            "refreshButtonEnabled": true
          }
        },
        {
          "title": "Activity Sub-group",
          "query": "MATCH (n:`ActivitySubGroupValue`) \nWHERE toLower(toString(n.`name`)) CONTAINS toLower($input) \nRETURN DISTINCT n.`name` as value,  n.`name` as display ORDER BY size(toString(value)) ASC LIMIT 10",
          "width": 3,
          "height": 1,
          "x": 7,
          "y": 2,
          "type": "select",
          "selection": {},
          "settings": {
            "type": "Node Property",
            "suggestionLimit": 10,
            "overridePropertyDisplayName": true,
            "entityType": "ActivitySubGroupValue",
            "propertyType": "name",
            "propertyTypeDisplay": "name",
            "parameterName": "neodash_activitysubgroupvalue_name"
          }
        },
        {
          "title": "Number of Activities (latest version) by groups",
          "query": "MATCH (agrp:ActivityGroupValue)<-[R1:IN_GROUP]-(asgrp:ActivitySubGroupValue)<-[R2:IN_SUB_GROUP]-(act:ActivityValue)\nMATCH(act)<-[R3:IN_HIERARCHY]-(ai:ActivityInstanceValue)<-[R42:LATEST]-(ai_r:ActivityInstanceRoot),\n(ai)-[R4:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R5:LATEST]->(aic:ActivityInstanceClassValue),\n(aicr)-[r7:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[:LATEST]->(aicp:ActivityInstanceClassValue)\nreturn agrp.name as `Activity Group`, \naicp.name as `Activity Type`,\naic.name as `Activity Sub-Type`,\ncount(ai.name) as `Number of Activity Instances`,\ncount(act.name) as `Number of Activities`",
          "width": 12,
          "height": 2,
          "x": 0,
          "y": 0,
          "type": "bar",
          "selection": {
            "index": "Activity Type",
            "value": "Number of Activities",
            "key": "Activity Group"
          },
          "settings": {
            "legend": true,
            "showOptionalSelections": true,
            "barValues": true,
            "layout": "vertical",
            "groupMode": "grouped",
            "positionLabel": "top",
            "hideSelections": false,
            "colors": "paired",
            "fullscreenEnabled": true,
            "labelSkipHeight": 0,
            "labelSkipWidth": 8,
            "refreshButtonEnabled": true,
            "labelRotation": 0,
            "legendWidth": 200
          }
        },
        {
          "title": "Activity Group",
          "query": "MATCH (n:`ActivityGroupValue`) \nWHERE toLower(toString(n.`name`)) CONTAINS toLower($input) \nRETURN DISTINCT n.`name` as value,  n.`name` as display ORDER BY size(toString(value)) ASC LIMIT 10",
          "width": 2,
          "height": 1,
          "x": 5,
          "y": 2,
          "type": "select",
          "selection": {},
          "settings": {
            "type": "Node Property",
            "entityType": "ActivityGroupValue",
            "propertyType": "name",
            "propertyTypeDisplay": "name",
            "parameterName": "neodash_activitygroupvalue_name",
            "suggestionLimit": 10
          }
        },
        {
          "title": "Activity Type",
          "query": "MATCH (n:`ActivityInstanceClassValue`) \nWHERE toLower(toString(n.`name`)) CONTAINS toLower($input) \nRETURN DISTINCT n.`name` as value,  n.`name` as display ORDER BY size(toString(value)) ASC LIMIT 20",
          "width": 2,
          "height": 1,
          "x": 0,
          "y": 2,
          "type": "select",
          "selection": {},
          "settings": {
            "type": "Node Property",
            "entityType": "ActivityInstanceClassValue",
            "propertyType": "name",
            "propertyTypeDisplay": "name",
            "parameterName": "neodash_activityinstanceclassvalue_name",
            "suggestionLimit": 20
          }
        },
        {
          "title": "Activity as a graph-view (logical view)",
          "query": "CALL apoc.when($neodash_activity_instance='' \n               and not $neodash_activity='',\n       'call custom.activityAsLogical($a) YIELD row return row[\"r2\"] as r2,row[\"r3\"] as r3,row[\"r4\"] as r4,row[\"r5\"] as r5,row[\"r6\"] as r6,row[\"r7\"] as r7,row[\"r8\"] as r8,row[\"r9\"] as r9,row[\"agrp\"] as agrp,row[\"aitmc1\"] as aitmc1,row[\"act\"] as act,row[\"r16\"] as r16,row[\"r18\"] as r18,row[\"r17\"] as r17,row[\"r19\"] as r19, row[\"r20\"] as r20,row[\"r21\"] as r21, row[\"ct2\"] as ct2,row[\"unit_ct\"] as unit_ct,row[\"ai\"] as ai,row[\"cl\"] as cl,row[\"unit_cl\"] as unit_cl,row[\"aicpp\"] as aicpp,row[\"aicp\"] as aicp,row[\"aitm1\"] as aitm1,row[\"aic\"] as aic,row[\"asgrp\"] as asgrp,row[\"r1\"] as r1,row[\"role\"] as role, row[\"dtype\"] as dtype',\n       'call custom.activityInstanceAsLogical($b) YIELD row return row[\"r2\"] as r2,row[\"r3\"] as r3,row[\"r4\"] as r4,row[\"r5\"] as r5,row[\"r6\"] as r6,row[\"r7\"] as r7,row[\"r8\"] as r8,row[\"r9\"] as r9,row[\"agrp\"] as agrp,row[\"aitmc1\"] as aitmc1,row[\"act\"] as act,row[\"r16\"] as r16,row[\"r18\"] as r18,row[\"r17\"] as r17,row[\"r19\"] as r19, row[\"r20\"] as r20,row[\"r21\"] as r21, row[\"ct2\"] as ct2,row[\"unit_ct\"] as unit_ct,row[\"ai\"] as ai,row[\"cl\"] as cl,row[\"unit_cl\"] as unit_cl,row[\"aicpp\"] as aicpp,row[\"aicp\"] as aicp,row[\"aitm1\"] as aitm1,row[\"aic\"] as aic,row[\"asgrp\"] as asgrp,row[\"r1\"] as r1,row[\"role\"] as role, row[\"dtype\"] as dtype\n',\n       {a:$neodash_activity,b:$neodash_activity_instance}) YIELD value \nRETURN  value.ct2,\nvalue.r2,\nvalue.r3,\nvalue.r4,\nvalue.r5,\nvalue.r6,\nvalue.r7,\nvalue.r8,\nvalue.r9,\nvalue.r16,\nvalue.ai,\nvalue.agrp,\nvalue.cl,\nvalue.act,\nvalue.aitm1,\nvalue.aitmc1,\nvalue.r17,\nvalue.aic,\nvalue.aicp,\nvalue.aicpp,\nvalue.asgrp,\nvalue.r1,\nvalue.r18,\nvalue.r19,\nvalue.r20,\nvalue.r21,\nvalue.unit_ct,\nvalue.unit_cl,\nvalue.role,\nvalue.dtype",
          "width": 9,
          "height": 4,
          "x": 0,
          "y": 8,
          "type": "graph",
          "selection": {
            "CTTerm": "name",
            "ActivityInstance": "name",
            "ActivityGroup": "name",
            "CTCodeList": "name",
            "Activity": "name",
            "ActivityItem": "name",
            "ActivityItemClass": "name",
            "ActivityInstanceClass": "name",
            "ActivitySubGroup": "name"
          },
          "settings": {
            "nodePositions": {},
            "nodeColorScheme": "paired",
            "relationshipParticles": false,
            "hideSelections": true,
            "frozen": false,
            "refreshButtonEnabled": true,
            "rightClickToExpandNodes": true,
            "layout": "force-directed",
            "fullscreenEnabled": true,
            "downloadImageEnabled": true,
            "enableEditing": false,
            "showPropertiesOnHover": true,
            "autorun": true
          }
        },
        {
          "title": "Activity Sub-type",
          "query": "MATCH(aicr:ActivityInstanceClassRoot)-[:LATEST]->(n:ActivityInstanceClassValue),(aicr)-[r7:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[:LATEST]->(aicp:ActivityInstanceClassValue) where not (aicr)<-[:PARENT_CLASS]-() WITH n WITH n MATCH (n) \nWHERE toLower(toString(n.`name`)) CONTAINS toLower($input) \nRETURN DISTINCT n.`name` as value,  n.`name` as display ORDER BY size(toString(value)) ASC LIMIT 5",
          "width": 3,
          "height": 1,
          "x": 2,
          "y": 2,
          "type": "select",
          "selection": {},
          "settings": {
            "type": "Node Property",
            "entityType": "ActivityInstanceClassValue",
            "propertyType": "name",
            "propertyTypeDisplay": "name",
            "parameterName": "neodash_activityinstanceclassvalue_name_subtype"
          }
        },
        {
          "title": "Activity in tabular format",
          "query": "CALL apoc.when($neodash_activity_instance='' \n               and not $neodash_activity='',\n            'call custom.activityAsLogical($a) YIELD row return row[\"r2\"] as r2,row[\"r3\"] as r3,row[\"r4\"] as r4,row[\"r5\"] as r5,row[\"r6\"] as r6,row[\"r7\"] as r7,row[\"r8\"] as r8,row[\"r9\"] as r9,row[\"agrp\"] as agrp,row[\"aitmc1\"] as aitmc1,row[\"act\"] as act,row[\"r16\"] as r16,row[\"r18\"] as r18,row[\"r17\"] as r17,row[\"r19\"] as r19, row[\"r20\"] as r20,row[\"r21\"] as r21, row[\"ct2\"] as ct2,row[\"unit_ct\"] as unit_ct,row[\"ai\"] as ai,row[\"cl\"] as cl,row[\"unit_cl\"] as unit_cl,row[\"aicpp\"] as aicpp,row[\"aicp\"] as aicp,row[\"aitm1\"] as aitm1,row[\"aic\"] as aic,row[\"asgrp\"] as asgrp,row[\"r1\"] as r1,row[\"role\"] as role, row[\"dtype\"] as dtype',\n       'call custom.activityInstanceAsLogical($b) YIELD row return row[\"r2\"] as r2,row[\"r3\"] as r3,row[\"r4\"] as r4,row[\"r5\"] as r5,row[\"r6\"] as r6,row[\"r7\"] as r7,row[\"r8\"] as r8,row[\"r9\"] as r9,row[\"agrp\"] as agrp,row[\"aitmc1\"] as aitmc1,row[\"act\"] as act,row[\"r16\"] as r16,row[\"r18\"] as r18,row[\"r17\"] as r17,row[\"r19\"] as r19, row[\"r20\"] as r20,row[\"r21\"] as r21, row[\"ct2\"] as ct2,row[\"unit_ct\"] as unit_ct,row[\"ai\"] as ai,row[\"cl\"] as cl,row[\"unit_cl\"] as unit_cl,row[\"aicpp\"] as aicpp,row[\"aicp\"] as aicp,row[\"aitm1\"] as aitm1,row[\"aic\"] as aic,row[\"asgrp\"] as asgrp,row[\"r1\"] as r1,row[\"role\"] as role, row[\"dtype\"] as dtype\n',\n       {a:$neodash_activity,b:$neodash_activity_instance}) YIELD value \nRETURN  apoc.any.property(value.agrp,'name') as ActivityGroup,\napoc.any.property(value.asgrp,'name') as ActivitySubGroup,\napoc.any.property(value.act, 'name') as Activity,\napoc.any.property(value.ai,'adam_param_code') as `Activity Instance`,\napoc.any.property(value.aitm1,'name') as `Activity Item`,\napoc.any.property(value.aitmc1,'name') as `Activit Item Class`,\nCASE WHEN value.ct2 is not null THEN apoc.any.property(value.ct2,'preferred_term') ELSE CASE WHEN value.unit_ct is not null THEN apoc.any.property(value.unit_ct,'name') END END  as `Term`,\nCASE WHEN value.ct2 is not null THEN apoc.any.property(value.cl, 'submission_value') ELSE CASE WHEN value.unit_cl is not null THEN apoc.any.property(value.unit_cl,'preferred_term') END END as `Code List`,\napoc.any.property(value.role,'name') as `Role of Activity Item Class`,\napoc.any.property(value.dtype,'name') as `Data Type of Activity Item Class`\n\n\n\n\n\n\n\n\n\n\n\n",
          "width": 12,
          "height": 2,
          "x": 0,
          "y": 6,
          "type": "table",
          "selection": {},
          "settings": {
            "compact": true,
            "columnWidths": "[1,1,0.5,0.6,0.5,0.5,0.5]"
          }
        },
        {
          "title": "Reset Activity Instance selection",
          "query": "RETURN true",
          "width": 5,
          "height": 1,
          "x": 0,
          "y": 5,
          "type": "select",
          "selection": {},
          "settings": {
            "type": "Free Text",
            "entityType": "activity_instance",
            "parameterName": "neodash_activity_instance",
            "clearParameterOnFieldClear": true
          }
        },
        {
          "title": "Reset Activity Selection",
          "query": "RETURN true",
          "width": 5,
          "height": 1,
          "x": 5,
          "y": 5,
          "type": "select",
          "selection": {},
          "settings": {
            "type": "Free Text",
            "entityType": "activity",
            "parameterName": "neodash_activity",
            "clearParameterOnFieldClear": true
          }
        },
        {
          "title": "Activity as a graph-view (physical view)",
          "query": "CALL apoc.when($neodash_activity_instance='' \n               and not $neodash_activity='',\n       'MATCH (p_agrp:ActivityGroupValue)<-[R1:IN_GROUP]-(p_asgrp:ActivitySubGroupValue)<-[R2:IN_SUB_GROUP]-(p_act:ActivityValue) where p_act.name=$a\nMATCH(p_act)<-[R3:IN_HIERARCHY]-(p_ai:ActivityInstanceValue)<-[R42:LATEST]-(p_ai_r:ActivityInstanceRoot),(p_ai)-[R4:ACTIVITY_INSTANCE_CLASS]->(p_aicr:ActivityInstanceClassRoot)-[R5:LATEST]->(p_aic:ActivityInstanceClassValue)\nMATCH (p_ai:ActivityInstanceValue)-[R6:CONTAINS_ACTIVITY_ITEM]->(p_aitm1:ActivityItemValue)\nOPTIONAL MATCH(p_aitm1)<-[R7:LATEST]-(p_aitm1r:ActivityItemRoot)<-[R8:HAS_ACTIVITY_ITEM]-(p_aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(p_aitmc1:ActivityItemClassValue)\nOPTIONAL MATCH (p_aicr)-[R10:PARENT_CLASS]->(p_aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(p_aicp:ActivityInstanceClassValue)\nOPTIONAL MATCH (p_aicrp)-[R12:PARENT_CLASS]->(p_aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(p_aicpp:ActivityInstanceClassValue)\nOPTIONAL MATCH(p_aitmc1r)<-[R14:HAS_ITEM_CLASS]-(p_aicr)\nOPTIONAL MATCH(p_aitmc1r)<-[R15:HAS_ITEM_CLASS]-(p_aicrp)\nOPTIONAL MATCH(p_aitmc1r)<-[R16:HAS_ITEM_CLASS]-(p_aicrpp) \nOPTIONAL MATCH (p_aitm1)-[R17]->(p_ct2cd:CTTermRoot)-[R18:HAS_NAME_ROOT]->(ct2cdr:CTTermNameRoot)-[R19:LATEST]->(p_ct2_sponsor), (p_ct2cd)-[R20:HAS_ATTRIBUTES_ROOT]->(ct2att:CTTermAttributesRoot)-[R21:LATEST]->(p_ct2_cdisc)\nOPTIONAL MATCH (p_aitm1)-[:HAS_UNIT_DEFINITION]->(p_unitdefr:UnitDefinitionRoot)-[R22:LATEST]->(p_unitdef:UnitDefinitionValue)\nOPTIONAL MATCH(p_ct2cd)<-[R23:HAS_TERM]-(clr:CTCodelistRoot)-[R24:HAS_ATTRIBUTES_ROOT]->(clatt:CTCodelistAttributesRoot),(clr)-[R25:HAS_NAME_ROOT]->(clattr:CTCodelistNameRoot)-[R26:LATEST]-(p_cl_sponsor),(clatt)-[R27:LATEST]->(p_cl_cdisc:CTCodelistAttributesValue),(pc:CTPackageCodelist) where ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-(pc) and pc.uid CONTAINS \"SDTM\") or NOT ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-())\nOPTIONAL MATCH (p_unitdef:UnitDefinitionValue)-[R28:HAS_CT_DIMENSION]-(unit_term:CTTermRoot)<-[R29:HAS_TERM]-(cl_root)-[R30:HAS_ATTRIBUTES_ROOT]->(clattr2)-[R31:LATEST]->(unit_cld)\nOPTIONAL MATCH(p_aitmc1)-[R32:HAS_ROLE]->(p_role_r:CTTermRoot), (p_role_r)-[R33:HAS_NAME_ROOT]->(ctnr_role)-[R34:LATEST]->(p_role_val), (p_role_r)-[R35:HAS_ATTRIBUTES_ROOT]->(ctattr)-[R36:LATEST]->(p_role_attr_val)\nOPTIONAL MATCH(p_aitmc1)-[R37:HAS_DATA_TYPE]->(p_dtype_r),  (p_dtype_r)-[R38:HAS_NAME_ROOT]->(ctnr_dtype)-[R39:LATEST]->(p_dtype_val), (p_dtype_r)-[R40:HAS_ATTRIBUTES_ROOT]->(ctattr_dtype)-[R41:LATEST]->(p_dtype_attr_val)\nreturn distinct p_agrp,p_asgrp,p_act,p_ai,p_aicr,p_aic,p_aitm1,p_aitm1r,p_aitmc1r,p_aitmc1,p_aicrp,p_aicp,p_aicrpp,p_aicpp,p_ct2cd,ct2cdr,p_ct2_sponsor,ct2att,p_ct2_cdisc,p_unitdefr,p_unitdef,clr,clatt,clattr,p_cl_sponsor,p_cl_cdisc,unit_term,cl_root,clattr2,unit_cld,p_role_r,ctattr,ctnr_role, p_role_val, p_role_attr_val,p_dtype_r,p_dtype_val, ctnr_dtype,p_dtype_attr_val,ctattr_dtype,R1,R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41, R42',\n       'MATCH (p_agrp:ActivityGroupValue)<-[R1:IN_GROUP]-(p_asgrp:ActivitySubGroupValue)<-[R2:IN_SUB_GROUP]-(p_act:ActivityValue)\nMATCH(p_act)<-[R3:IN_HIERARCHY]-(p_ai:ActivityInstanceValue)<-[R42:LATEST]-(p_ai_r:ActivityInstanceRoot),(p_ai)-[R4:ACTIVITY_INSTANCE_CLASS]->(p_aicr:ActivityInstanceClassRoot)-[R5:LATEST]->(p_aic:ActivityInstanceClassValue) where p_ai.adam_param_code=$b\nMATCH (p_ai:ActivityInstanceValue)-[R6:CONTAINS_ACTIVITY_ITEM]->(p_aitm1:ActivityItemValue)\nOPTIONAL MATCH(p_aitm1)<-[R7:LATEST]-(p_aitm1r:ActivityItemRoot)<-[R8:HAS_ACTIVITY_ITEM]-(p_aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(p_aitmc1:ActivityItemClassValue)\nOPTIONAL MATCH (p_aicr)-[R10:PARENT_CLASS]->(p_aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(p_aicp:ActivityInstanceClassValue)\nOPTIONAL MATCH (p_aicrp)-[R12:PARENT_CLASS]->(p_aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(p_aicpp:ActivityInstanceClassValue)\nOPTIONAL MATCH(p_aitmc1r)<-[R14:HAS_ITEM_CLASS]-(p_aicr)\nOPTIONAL MATCH(p_aitmc1r)<-[R15:HAS_ITEM_CLASS]-(p_aicrp)\nOPTIONAL MATCH(p_aitmc1r)<-[R16:HAS_ITEM_CLASS]-(p_aicrpp) \nOPTIONAL MATCH (p_aitm1)-[R17]->(p_ct2cd:CTTermRoot)-[R18:HAS_NAME_ROOT]->(ct2cdr:CTTermNameRoot)-[R19:LATEST]->(p_ct2_sponsor), (p_ct2cd)-[R20:HAS_ATTRIBUTES_ROOT]->(ct2att:CTTermAttributesRoot)-[R21:LATEST]->(p_ct2_cdisc)\nOPTIONAL MATCH (p_aitm1)-[:HAS_UNIT_DEFINITION]->(p_unitdefr:UnitDefinitionRoot)-[R22:LATEST]->(p_unitdef:UnitDefinitionValue)\nOPTIONAL MATCH(p_ct2cd)<-[R23:HAS_TERM]-(clr:CTCodelistRoot)-[R24:HAS_ATTRIBUTES_ROOT]->(clatt:CTCodelistAttributesRoot),(clr)-[R25:HAS_NAME_ROOT]->(clattr:CTCodelistNameRoot)-[R26:LATEST]-(p_cl_sponsor),(clatt)-[R27:LATEST]->(p_cl_cdisc:CTCodelistAttributesValue),(pc:CTPackageCodelist) where ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-(pc) and pc.uid CONTAINS \"SDTM\") or NOT ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-())\nOPTIONAL MATCH (p_unitdef:UnitDefinitionValue)-[R28:HAS_CT_DIMENSION]-(unit_term:CTTermRoot)<-[R29:HAS_TERM]-(cl_root)-[R30:HAS_ATTRIBUTES_ROOT]->(clattr2)-[R31:LATEST]->(unit_cld)\nOPTIONAL MATCH(p_aitmc1)-[R32:HAS_ROLE]->(p_role_r:CTTermRoot), (p_role_r)-[R33:HAS_NAME_ROOT]->(ctnr_role)-[R34:LATEST]->(p_role_val), (p_role_r)-[R35:HAS_ATTRIBUTES_ROOT]->(ctattr)-[R36:LATEST]->(p_role_attr_val)\nOPTIONAL MATCH(p_aitmc1)-[R37:HAS_DATA_TYPE]->(p_dtype_r),  (p_dtype_r)-[R38:HAS_NAME_ROOT]->(ctnr_dtype)-[R39:LATEST]->(p_dtype_val), (p_dtype_r)-[R40:HAS_ATTRIBUTES_ROOT]->(ctattr_dtype)-[R41:LATEST]->(p_dtype_attr_val)\nreturn distinct p_agrp,p_asgrp,p_act,p_ai,p_aicr,p_aic,p_aitm1,p_aitm1r,p_aitmc1r,p_aitmc1,p_aicrp,p_aicp,p_aicrpp,p_aicpp,p_ct2cd,ct2cdr,p_ct2_sponsor,ct2att,p_ct2_cdisc,p_unitdefr,p_unitdef,clr,clatt,clattr,p_cl_sponsor,p_cl_cdisc,unit_term,cl_root,clattr2,unit_cld,p_role_r,ctattr,ctnr_role, p_role_val, p_role_attr_val,p_dtype_r,p_dtype_val, ctnr_dtype,p_dtype_attr_val,ctattr_dtype,R1,R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41, R42',{a:$neodash_activity,b:$neodash_activity_instance}) YIELD value \nreturn\nvalue.p_agrp,\nvalue.p_asgrp,\nvalue.p_act,\nvalue.p_ai,\nvalue.p_aicr,\nvalue.p_aic,\nvalue.p_aitm1,\nvalue.p_aitm1r,\nvalue.p_aitmc1r,\nvalue.p_aitmc1,\nvalue.p_aicrp,\nvalue.p_aicp,\nvalue.p_aicrpp,\nvalue.p_aicpp,\nvalue.p_ct2cd,\nvalue.ct2cdr,\nvalue.p_ct2_sponsor,\nvalue.ct2att,\nvalue.p_ct2_cdisc,\nvalue.p_unitdefr,\nvalue.p_unitdef,\nvalue.clr,\nvalue.clatt,\nvalue.clattr,\nvalue.p_cl_sponsor,\nvalue.p_cl_cdisc,\nvalue.unit_term,\nvalue.cl_root,\nvalue.clattr2,\nvalue.unit_cld,\nvalue.p_role_r,\nvalue.ctattr,\nvalue.ctnr_role,\nvalue.p_role_val,\nvalue.p_role_attr_val,\nvalue.p_dtype_r,\nvalue.p_dtype_val,\nvalue.ctnr_dtype,\nvalue.p_dtype_attr_val,\nvalue.ctattr_dtype,\nvalue.R1,\nvalue.R2,\nvalue.R3,\nvalue.R4,\nvalue.R5,\nvalue.R6,\nvalue.R7,\nvalue.R8,\nvalue.R9,\nvalue.R10,\nvalue.R11,\nvalue.R12,\nvalue.R13,\nvalue.R14,\nvalue.R15,\nvalue.R16,\nvalue.R17,\nvalue.R18,\nvalue.R19,\nvalue.R20,\nvalue.R21,\nvalue.R22,\nvalue.R23,\nvalue.R24,\nvalue.R25,\nvalue.R26,\nvalue.R27,\nvalue.R28,\nvalue.R29,\nvalue.R30,\nvalue.R31,\nvalue.R32,\nvalue.R33,\nvalue.R34,\nvalue.R35,\nvalue.R36,\nvalue.R37,\nvalue.R38,\nvalue.R39,\nvalue.R40,\nvalue.R41",
          "width": 9,
          "height": 2,
          "x": 0,
          "y": 12,
          "type": "graph",
          "selection": {
            "TemplateParameterTermValue": "name",
            "ConceptValue": "name",
            "ActivityGroupValue": "name",
            "ActivitySubGroupValue": "name",
            "ActivityValue": "name",
            "ActivityInstanceValue": "name",
            "ActivityInstanceClassRoot": "uid",
            "ActivityInstanceClassValue": "name",
            "ActivityItemValue": "name",
            "ActivityItemRoot": "uid",
            "ActivityItemClassRoot": "uid",
            "ActivityItemClassValue": "name",
            "CTTermRoot": "uid",
            "CTTermNameRoot": "uid",
            "CTTermNameValue": "name",
            "CTTermAttributesRoot": "(label)",
            "CTTermAttributesValue": "(label)",
            "CTCodelistRoot": "uid",
            "CTCodelistAttributesRoot": "(label)",
            "CTCodelistNameRoot": "(label)",
            "CTCodelistNameValue": "name",
            "CTCodelistAttributesValue": "name",
            "TemplateParameterTermRoot": "uid",
            "ConceptRoot": "uid",
            "UnitDefinitionRoot": "uid",
            "UnitDefinitionValue": "name"
          },
          "settings": {
            "hideSelections": true,
            "frozen": false,
            "nodePositions": {},
            "refreshButtonEnabled": true,
            "nodeColorScheme": "paired",
            "showPropertiesOnHover": true,
            "downloadImageEnabled": true,
            "fullscreenEnabled": true
          }
        }
      ]
    },
    {
      "title": "Activity in COSMOS format",
      "reports": [
        {
          "title": "Select Activity Instance",
          "query": "CALL apoc.when($neodash_activitysubgroupvalue_name='','MATCH (agrp:ActivityGroupValue)<-[r1:IN_GROUP]-(asgrp:ActivitySubGroupValue)<-[r2:IN_SUB_GROUP]-(act:ActivityValue)<-[r3:IN_HIERARCHY]-(ai:ActivityInstanceValue),(ai)-[r5:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[:LATEST]->(aic:ActivityInstanceClassValue),(aicr)-[r7:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[:LATEST]->(aicp:ActivityInstanceClassValue) return aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.adam_param_code as ActivityInstance','MATCH (agrp:ActivityGroupValue)<-[r1:IN_GROUP]-(asgrp:ActivitySubGroupValue)<-[r2:IN_SUB_GROUP]-(act:ActivityValue)<-[r3:IN_HIERARCHY]-(ai:ActivityInstanceValue),(ai)-[r5:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[:LATEST]->(aic:ActivityInstanceClassValue),(aicr)-[r7:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[:LATEST]->(aicp:ActivityInstanceClassValue) where asgrp.name in [$a] return distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.adam_param_code as ActivityInstance', {a:$neodash_activitysubgroupvalue_name}) YIELD value\nreturn value.ActivityGroup as `Activity Group`,\nvalue.ActivitySubGroup as `Activity Sub-group`,\nvalue.Activity as Activity,\nvalue.ActivityInstance as `Activity Instance`",
          "width": 9,
          "height": 2,
          "x": 0,
          "y": 1,
          "type": "table",
          "selection": {},
          "settings": {
            "type": "Free Text",
            "entityType": "activity_instance",
            "clearParameterOnFieldClear": true,
            "parameterName": "neodash_activity_instance",
            "actionsRules": [
              {
                "condition": "Click",
                "field": "Activity Instance",
                "value": "Activity Instance",
                "customization": "set variable",
                "customizationValue": "cosmos_activity_instance"
              }
            ],
            "compact": true,
            "columnWidths": "[1,2,1]"
          }
        },
        {
          "title": "Activity in CDISC COSMOS yaml format",
          "query": "call custom.activityInstanceAsLogical($neodash_cosmos_activity_instance) YIELD row WITH \nrow[\"aic\"] as aic,\nrow[\"asgrp\"] as asgrp,\nrow[\"aitmc1\"] as aitmc1,\nrow[\"ai\"] as ai,\nrow[\"dtype\"] as dtype,\nrow[\"ct2\"] as ct2,\nrow[\"unit_ct\"] as unit_ct\nwith aic, asgrp, aitmc1,ai,dtype,\ncollect(distinct(coalesce(apoc.any.property(ct2,'code_submission_value'),apoc.any.property(unit_ct,'name')))) as val_list\nWITH aic, asgrp, dtype, aitmc1,ai,val_list,toInteger(apoc.any.property(aitmc1,'order')) as var_order\ncall custom.nci_get_concept_code_from_term(apoc.any.property(aitmc1,'name')) YIELD code as item_concept_id\nwith aic, asgrp, dtype, aitmc1,ai, var_order, item_concept_id,\napoc.map.fromPairs( [\n                    ['conceptId', item_concept_id],\n                    ['href', 'https://ncithesaurus.nci.nih.gov/ncitbrowser/ConceptReport.jsp?dictionary=NCI_Thesaurus&ns=ncit&code='+item_concept_id],\n                    ['shortName', apoc.any.property(aitmc1,'name')],\n                    ['dataType',apoc.any.property(dtype,'name')],\n                    ['exampleSet',val_list]\n                    ]) as varlist order by var_order\nwith asgrp, aic, ai, collect(varlist) as vars,\nCASE when (apoc.any.property(aic,'name')='NumericFinding') THEN 'Quantitative' ELSE \nCASE WHEN (apoc.any.property(aic,'name')='CategoricFinding') THEN 'Ordinal' ELSE \n null END END as aiclass\n with asgrp,ai,vars,aiclass\n call custom.nci_get_concept_code_from_term(apoc.any.property(ai,'name')) YIELD code as conceptId\n with asgrp, ai,vars, aiclass,conceptId\n call custom.get_parent_concept_code(conceptId) YIELD code as parentConceptId\n with asgrp, ai,vars, aiclass,conceptId, parentConceptId\n call custom.get_nci_concept_definition(conceptId) YIELD conceptDefinition as conceptDefinition\n with asgrp, ai,vars, aiclass,conceptId, parentConceptId, conceptDefinition\n call custom.get_nci_concept_synonyms(conceptId) YIELD conceptSynonyms as bc_synonyms\n  with asgrp, ai,vars, aiclass,conceptId, parentConceptId, conceptDefinition,bc_synonyms,\n apoc.map.fromPairs([ \n                    ['packageDate','2023-04-30'],\n                    ['packageType','bc'],\n                    ['conceptId',conceptId],\n                    ['href', 'https://ncithesaurus.nci.nih.gov/ncitbrowser/ConceptReport.jsp?dictionary=NCI_Thesaurus&ns=ncit&code='+conceptId],\n                    ['parentConceptId',parentConceptId],\n                    ['category',collect(apoc.any.property(asgrp,'name'))],\n                    ['shortName',apoc.any.property(ai,'name')],\n                    ['synonym',collect(bc_synonyms)],\n                    ['resultScale',aiclass],\n                    ['definition',conceptDefinition],\n                    ['dataElementConcepts', vars]\n                    ]) as activity\nreturn distinct activity",
          "width": 9,
          "height": 6,
          "x": 0,
          "y": 3,
          "type": "value",
          "selection": {},
          "settings": {
            "fontSize": 12,
            "refreshButtonEnabled": true,
            "fullscreenEnabled": true,
            "downloadImageEnabled": false,
            "format": "yml"
          }
        },
        {
          "title": "Limit list (search Activity Sub Group)",
          "query": "MATCH (n:`ActivitySubGroupValue`) \nWHERE toLower(toString(n.`name`)) CONTAINS toLower($input) \nRETURN DISTINCT n.`name` as value,  n.`name` as display ORDER BY size(toString(value)) ASC LIMIT 20",
          "width": 9,
          "height": 1,
          "x": 0,
          "y": 0,
          "type": "select",
          "selection": {},
          "settings": {
            "type": "Node Property",
            "entityType": "ActivitySubGroupValue",
            "propertyType": "name",
            "propertyTypeDisplay": "name",
            "parameterName": "neodash_activitysubgroupvalue_name",
            "suggestionLimit": 20,
            "clearParameterOnFieldClear": true
          }
        },
        {
          "title": "Selected Instance",
          "query": "return $neodash_cosmos_activity_instance\n\n",
          "width": 3,
          "height": 1,
          "x": 9,
          "y": 0,
          "type": "value",
          "selection": {},
          "settings": {
            "fontSize": 20
          }
        }
      ]
    }
  ],
  "parameters": {},
  "extensions": {
    "advanced-charts": true,
    "styling": true,
    "actions": true
  }
}