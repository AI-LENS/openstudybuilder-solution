# Docker Compose file for preview environment and building docker images in pipelines

services:

  # Database service for local development
  database:
    build:
      args:
        NEO4J_IMAGE: ${NEO4J_IMAGE:-neo4j:4.4.12-enterprise}
        PYTHON_IMAGE: ${PYTHON_IMAGE:-python:3.7.12-slim}
        NEO4J_dbms_memory_heap_initial__size: "2G"
        NEO4J_dbms_memory_heap_max__size: "2G"
        NEO4J_dbms_memory_pagecache_size: "1G"
        CDISC_DATA_DIR: ${CDISC_DATA_DIR:-mdr_standards_import/container_booting/}
        NEO4J_MDR_AUTH_PASSWORD: "${NEO4J_PASSWORD:-changeme1234}"
        UID: ${UID:-1000}
      context: ./
      dockerfile: database.Dockerfile
    environment:
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
      NEO4J_dbms_memory_heap_initial__size: "2G"
      NEO4J_dbms_memory_heap_max__size: "2G"
      NEO4J_dbms_memory_pagecache_size: "1G"
      NEO4J_dbms_default__listen__address: "0.0.0.0"
      NEO4J_dbms_default__advertised__address: "localhost"
      NEO4J_dbms_connector_bolt_advertised__address: "localhost:5002"
      NEO4J_dbms_connector_http_advertised__address: "localhost:5001"
    ports:
      - "${BIND_ADDRESS:-127.0.0.1}:${NEO4J_BOLT_PORT:-5002}:7687"
      - "${BIND_ADDRESS:-127.0.0.1}:${NEO4J_HTTP_PORT:-5001}:7474"
    volumes:
      - type: volume
        source: data
        target: /data
      # For database dumps, you can mount a folder into the container ex.:
      #- ./neo4j-dumps:/data/dumps

  # API image & service, distinct build stages for production and development
  api:
    build:
      context: ./clinical-mdr-api
      dockerfile: Dockerfile
      args:
        UVICORN_PORT: 5003
        UVICORN_ROOT_PATH: "/api"
        PYTHON_IMAGE: ${PYTHON_IMAGE:-python:3.7.12-slim}
        TARGET: ${BUILD_TARGET:-dev}
    image: ${API_IMAGE:-}
    depends_on:
      database:
        condition: service_healthy
    environment:
      NEO4J_DSN: 'bolt://neo4j:${NEO4J_PASSWORD:-changeme1234}@database:7687'
      NEO4J_DATABASE: 'mdrdb'
      OAUTH_ENABLED: 'False'
      ALLOW_ORIGIN_REGEX: '.*'

  # Frontend image for production (see UI service for local development)
  frontend:
    build:
      args:
        NGINX_IMAGE: ${NGINX_IMAGE:-nginx:alpine}
        NODE_IMAGE: ${NODE_IMAGE:-node:lts-alpine}
      context: ./studybuilder
      dockerfile: Dockerfile
    image: ${FRONTEND_IMAGE:-}
    depends_on:
      # Nginx reverse-proxy configuration requires downstream services to be ready at startup
      api:
        condition: service_healthy
      documentation:
        condition: service_healthy
    ports:
      - "${BIND_ADDRESS:-127.0.0.1}:${FRONTEND_PORT:-5005}:5005"

  # Documentation portal image for production (see docs service for local development)
  documentation:
    build:
      args:
        NGINX_IMAGE: ${NGINX_IMAGE:-nginx:alpine}
        NODE_IMAGE: ${NODE_IMAGE:-node:lts-alpine3.14}
      context: ./documentation-portal
      dockerfile: Dockerfile
    image: ${DOCUMENTATION_IMAGE:-}

volumes:
  # Volume for storing the database on a local development environment
  data:
    name: studybuilder_database
