# Pipeline parameters
parameters:
- name: SERVICE_CONN
  type: string
  default: IaCAgent-ClinicalMDR-DEV
- name: DEPLOY_ID_NUMBER
  displayName: ID number of parallel deployments running in the same environment.
  type: string
  default: '1'
  values:
  - '1'
  - '2'
  - '3'
  - '4'
  - '5'
- name: VAULT_NAME_PREFIX
  type: string
  default: kv-general


steps:
# Specify python version. The version must be manually installed beforehand so the agent has it available.
- task: UsePythonVersion@0
  inputs:
    versionSpec: $(python_version)
    addToPath: true
    architecture: 'x64'

# Get AZ metadata for later use
- task: AzureCLI@2
  displayName: Get AZ metadata
  name: azmd
  inputs:
    azureSubscription: ${{parameters.SERVICE_CONN}}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      namesuffix=`az resource list --resource-type "Microsoft.Network/applicationGateways" --query "[?tags.environmentNumber == '${{parameters.DEPLOY_ID_NUMBER}}'].name" -o tsv | cut -d "-" -f 2`
      echo "##vso[task.setvariable variable=namesuffix;isOutput=true;]$namesuffix"

# Get secrets from AzureKeyVault
- task: AzureKeyVault@1
  displayName: Get AZ secrets
  inputs:
    azureSubscription: ${{parameters.SERVICE_CONN}}
    KeyVaultName: '${{parameters.VAULT_NAME_PREFIX}}-$(azmd.namesuffix)'
    RunAsPreJob: false
    SecretsFilter:
      CLINICAL-MDR-TEST-${{parameters.DEPLOY_ID_NUMBER}}-OIDC-DOC,
      CLINICAL-MDR-TEST-${{parameters.DEPLOY_ID_NUMBER}}-AUTH-URL,
      CLINICAL-MDR-TEST-${{parameters.DEPLOY_ID_NUMBER}}-TOKEN-URL,
      CLINICAL-MDR-TEST-${{parameters.DEPLOY_ID_NUMBER}}-APP-ID,
      CLINICAL-MDR-TEST-${{parameters.DEPLOY_ID_NUMBER}}-URI,
      CLINICAL-MDR-TEST-${{parameters.DEPLOY_ID_NUMBER}}-CLIENT-ID,
      CLINICAL-MDR-TEST-${{parameters.DEPLOY_ID_NUMBER}}-EXP-ACCESS-TOKEN

# Resolve and install python dependencies
- script: |
    python3 -m venv venv --clear
    source $(Build.SourcesDirectory)/venv/bin/activate
    python -m pip install --upgrade pipenv
    python -m pip install wheel
    python -m pipenv lock
    python -m pipenv requirements > requirements.txt
    python -m pipenv install --dev

    echo "y" | docker volume prune
    docker-compose down -v
    docker-compose up -d -V
  displayName: "Setup test environment"